// Mocks generated by Mockito 5.4.4 from annotations
// in weather_forecast_app/test/app/modules/home/infra/repositories/fetch_weather_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_forecast_app/app/core/models/location/location_model.dart'
    as _i6;
import 'package:weather_forecast_app/app/core/models/position/position_model.dart'
    as _i2;
import 'package:weather_forecast_app/app/core/models/weather_forecast/weather_forecast_model.dart'
    as _i3;
import 'package:weather_forecast_app/app/core/services/logger/logger_service.dart'
    as _i9;
import 'package:weather_forecast_app/app/core/services/network_service/network_service.dart'
    as _i8;
import 'package:weather_forecast_app/app/modules/home/infra/datasources/favorite_locations_datasource.dart'
    as _i7;
import 'package:weather_forecast_app/app/modules/home/infra/datasources/fetch_weather_datasource.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePositionModel_0 extends _i1.SmartFake implements _i2.PositionModel {
  _FakePositionModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherForecastModel_1 extends _i1.SmartFake
    implements _i3.WeatherForecastModel {
  _FakeWeatherForecastModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FetchWeatherDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchWeatherDatasource extends _i1.Mock
    implements _i4.FetchWeatherDatasource {
  MockFetchWeatherDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.PositionModel> fetchPositionFromLocation(
          _i6.LocationModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPositionFromLocation,
          [location],
        ),
        returnValue: _i5.Future<_i2.PositionModel>.value(_FakePositionModel_0(
          this,
          Invocation.method(
            #fetchPositionFromLocation,
            [location],
          ),
        )),
      ) as _i5.Future<_i2.PositionModel>);

  @override
  _i5.Future<_i3.WeatherForecastModel> fetchWeather(
          _i2.PositionModel? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [position],
        ),
        returnValue: _i5.Future<_i3.WeatherForecastModel>.value(
            _FakeWeatherForecastModel_1(
          this,
          Invocation.method(
            #fetchWeather,
            [position],
          ),
        )),
      ) as _i5.Future<_i3.WeatherForecastModel>);
}

/// A class which mocks [FavoriteLocationsDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteLocationsDatasource extends _i1.Mock
    implements _i7.FavoriteLocationsDatasource {
  MockFavoriteLocationsDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.LocationModel>> fetchFavoritesLocations() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFavoritesLocations,
          [],
        ),
        returnValue:
            _i5.Future<List<_i6.LocationModel>>.value(<_i6.LocationModel>[]),
      ) as _i5.Future<List<_i6.LocationModel>>);

  @override
  _i5.Future<_i3.WeatherForecastModel?> fetchFavoriteLocationDetailed(
          _i6.LocationModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFavoriteLocationDetailed,
          [location],
        ),
        returnValue: _i5.Future<_i3.WeatherForecastModel?>.value(),
      ) as _i5.Future<_i3.WeatherForecastModel?>);

  @override
  _i5.Future<void> addFavoriteLocationWithWeather(
    _i6.LocationModel? location,
    _i3.WeatherForecastModel? weather,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFavoriteLocationWithWeather,
          [
            location,
            weather,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeFavoriteLocation(_i6.LocationModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFavoriteLocation,
          [location],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i8.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.NetworkStatus get networkStatus => (super.noSuchMethod(
        Invocation.getter(#networkStatus),
        returnValue: _i8.NetworkStatus.connected,
      ) as _i8.NetworkStatus);

  @override
  set networkStatus(_i8.NetworkStatus? _networkStatus) => super.noSuchMethod(
        Invocation.setter(
          #networkStatus,
          _networkStatus,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i9.LoggerService {
  MockLoggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void log(String? message) => super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    dynamic exception, {
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [exception],
          {#stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );
}
